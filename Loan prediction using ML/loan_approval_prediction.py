# -*- coding: utf-8 -*-
"""Loan_approval_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mh2XRrFbp5Cu1pThI-nZ5QkPeKCyzqlE
"""



"""**LOAN APPROVAL PREDICTION USING MACHINE LEARNING**

Importing the Dependencis
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and processing

"""

# loading the dataset to pandas DataFrame
# to process the csv file

loan_dataset = pd.read_csv('/content/Loan_prediction_dataset.csv')

type(loan_dataset)

# printing the first 5 rows of the dataframe
loan_dataset.head()

#  number of rows and coloums
loan_dataset.shape

# some statistical measurements ( avg,mean etc....)
loan_dataset.describe()

# number of missing values in each column
loan_dataset.isnull().sum()

# dropoing the missing values
loan_dataset = loan_dataset.dropna()

# number of missing values in each column
loan_dataset.isnull().sum()

# checking new shape of dataset
loan_dataset.shape

# label encoding (replacing any col)
loan_dataset.replace({"Loan_Status":{'N':0, 'Y':1}}, inplace=True)

loan_dataset.head()

# dependent column values
loan_dataset['Dependents'].value_counts()

# replacing the value of 3+ to 4
loan_dataset =loan_dataset.replace(to_replace='3+' , value=4)

# latest dependent column values
loan_dataset['Dependents'].value_counts()

"""Data visualization"""

# education and loan status
sns.countplot(x='Education', hue='Loan_Status'  , data =loan_dataset)

# marital status vs loan status graph
sns.countplot(x='Married',hue='Loan_Status',data=loan_dataset)

# gender vs loan status graph
sns.countplot(x='Gender',hue='Loan_Status',data=loan_dataset)

# converting text value to numerical values
loan_dataset.replace({'Married':{'No':0,'Yes':1}, 'Gender':{'Male':1,'Female':0},'Self_Employed':{'No':0,'Yes':1},
                      'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2},'Education':{'Graduate':1, 'Not Graduate':0}},inplace=True)

loan_dataset.head()

# separating the data and label
x=loan_dataset.drop(columns=['Loan_ID','Loan_Status'],axis=1)
y=loan_dataset['Loan_Status']

print(x)
print(y)

"""Train,Test and split"""

X_train, X_test, Y_train, Y_test = train_test_split(x,y,test_size=0.1,stratify=y,random_state=2)

print(x.shape, X_train.shape,X_test.shape)



"""Training the model :
SVM model
"""

classifier= svm.SVC(kernel='linear')

# training the support vector machine model
classifier.fit(X_train.values,Y_train)

"""Model evaluation"""

# accuracy score on training data
X_train_prediction =classifier.predict(X_train.values)
training_data_accuracy= accuracy_score(X_train_prediction,Y_train)

print('Accuracy on training data :',training_data_accuracy )

# accuracy score on training data
X_test_prediction=classifier.predict(X_test.values)
test_data_accuracy=accuracy_score(X_test_prediction, Y_test)

print('Accuracy on test data : ',test_data_accuracy)

loan_dataset.head()

loan_dataset.shape

"""***predicting for few new values***"""

# 1)
# sample input from gender to Property_Area =1,1,4,1,0,3036,2504.0,158.0,360.0,0.0,1
Input_data = (1,1,4,1,0,3036,2504.0,158.0,360.0,0.0,1)

Input_data_as_numpy_array = np.asarray(Input_data)

# reshaping the data as we are pridicting for one instance

input_reshaping = Input_data_as_numpy_array.reshape(1,-1)

x = classifier.predict(input_reshaping)

# printing the loan status
if (x[0] == 1):
  print('The person will receive loan')
else:
  print('The person will not receive loan')

#2)
#  sample input from gender to Property_Area =1,0,0,1,0,6000,0.0,141.0,360.0,1.0,2
Input_data = (1,0,0,1,0,6000,0.0,141.0,360.0,1.0,2)

Input_data_as_numpy_array = np.asarray(Input_data)

# reshaping the data as we are pridicting for one instance

input_reshaping = Input_data_as_numpy_array.reshape(1,-1)

x = classifier.predict(input_reshaping)


# print('The person loan status ',x)
if (x[0] == 1):
  print('The person will receive loan')
else:
  print('The person will not receive loan')